services:
  database:
    image: postgres:latest
    container_name: go-ekyc-psql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ekyc_db
    ports:
      - "5432:5432"
    volumes:
      - psql_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 20s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: go-ekyc-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
      MINIO_BROWSER_PORT: "9001"
    ports:
      - "9000:9000"    
      - "9001:9001"      
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: go-ekyc-rabbitmq
    ports:
      - "5672:5672" 
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: go-ekyc-redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile_app
    container_name: go-ekyc-app
    restart: always
    ports:
      - "8080:8080"
    env_file:
      - ${ENV_FILE}
    depends_on:
      database:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  worker:
    build:
      context: .
      dockerfile: Dockerfile_worker
    container_name: go-ekyc-worker
    restart: always
    env_file:
      - ${ENV_FILE}
    depends_on:
      database:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  cronjob:
    build:
      context: .
      dockerfile: Dockerfile_cronjob
    container_name: go-ekyc-cronjob
    restart: always
    env_file:
      - ${ENV_FILE}
    depends_on:
      database:
        condition: service_healthy
      minio:
        condition: service_healthy

volumes:
  psql_data:
  minio_data:
  redis_data:
  rabbitmq_data:
